HeapDomain(types, vars, actions) ::= <<
Types = {
  $types:{it|$it.name$}; separator="\n"$
}

Variables = {
  $vars; separator="\n"$
}

Actions = {
  $actions; separator="\n"$
}
>>

IntType() ::= <<int>>

RefType(name, fields) ::= <<
type $name$ {
  $fields; separator="\n"$
}
>>

Field(name, dstType, ghost) ::= <<
$if(ghost)$ghost $else$$endif$$name$ : $dstType$
>>

IntField(name) ::= <<$name$>>

IntVar(name, is_readonly) ::= <<
$if(is_readonly)$immut $else$$endif$$name$
>>

RefVar(name, is_readonly) ::= <<
$if(is_readonly)$immut $else$$endif$$name$
>>

NullExpr() ::= <<null>>

ValExpr(val) ::= <<$val$>>

IntVal(num) ::= <<$num$>>

VarExpr(raw_var) ::= <<$raw_var.name$>>

Var(name) ::= <<$name$>>

NewExpr(raw_type) ::= <<new $raw_type.name$()>>

DerefExpr(lhs, field) ::= <<$lhs$.$field$>>

IntBinOpExpr(lhs, op, rhs) ::= <<$lhs$ $op$ $rhs$>>

OrExpr(lhs, rhs) ::= <<($lhs$) || ($rhs$)>>
AndExpr(lhs, rhs) ::= <<($lhs$) && ($rhs$)>>
NotExpr(sub) ::= <<!($sub$)>>

EqExpr(lhs, rhs) ::= <<$lhs$ == $rhs$>>

AssignStmt(lhs, rhs) ::= <<$lhs$ = $rhs$>>

SeqStmt(first, second) ::= <<
$first$; $second$
>>

IfStmt(cond, thenStmt, elseStmt) ::= <<
if ($cond$) {
  $thenStmt$
}
else {
  $elseStmt$
}
>>

WhileStmt(cond, body) ::= <<
while ($cond$) {
  $body$
}
>>
