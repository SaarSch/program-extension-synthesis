HeapDomain(types, vars, actions) ::= <<
Types = {
  $types:{it|$it.name$}; separator="\n"$
}

Variables = {
  $vars; separator="\n"$
}

Actions = {
  $actions; separator="\n"$
}
>>

IntType() ::= <<int>>

RefType(name, fields) ::= <<
type $name$ {
  $fields; separator="\n"$
}
>>

Field(name, dstType, ghost) ::= <<
$if(ghost)$ghost $else$$endif$$name$ : $dstType$
>>

IntField(name) ::= <<$name$>>

IntVar(name, is_readonly) ::= <<
$if(is_readonly)$$else$mut $endif$$name$
>>

RefVar(name, is_readonly) ::= <<
$if(is_readonly)$$else$mut $endif$$name$
>>

NullExpr() ::= <<null>>

VarExpr(raw_var) ::= <<$raw_var.name$>>

NewExpr(raw_type) ::= <<new $raw_type.name$()>>

DerefExpr(lhs, field) ::= <<$lhs$.$field$>>


AssignStmt(lhs, rhs) ::= <<$lhs$=$rhs$>>

SeqStmt(first, second) ::= <<
$first$; $second$
>>

IfStmt(cond, then, else) ::= <<
if ($cond$) {
  $then$
}
else {
  $else$
}
>>

WhileStmt(cond, body) ::= <<
while ($cond$) {
  $body$
}
>>
