
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Apr 14 01:25:33 IDT 2018
//----------------------------------------------------

package heap.ast;

import java.io.*;
import java.util.*;
import heap.ast.Token;
import heap.IntBinOp;
import java_cup.runtime.Symbol;

/** CUP v0.10k generated parser.
  * @version Sat Apr 14 01:25:33 IDT 2018
  */
@SuppressWarnings({"rawtypes", "unused"}) public class HeapParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public HeapParser() {super();}

  /** Constructor which sets the default scanner. */
  public HeapParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\003\003\000\002\002\004\000\002\004" +
    "\003\000\002\004\004\000\002\005\003\000\002\005\003" +
    "\000\002\006\007\000\002\010\002\000\002\010\003\000" +
    "\002\007\003\000\002\007\004\000\002\011\005\000\002" +
    "\011\006\000\002\012\016\000\002\015\002\000\002\015" +
    "\003\000\002\016\002\000\002\016\003\000\002\013\003" +
    "\000\002\013\004\000\002\013\005\000\002\014\003\000" +
    "\002\014\005\000\002\022\005\000\002\020\002\000\002" +
    "\020\003\000\002\017\003\000\002\017\005\000\002\021" +
    "\004\000\002\024\002\000\002\024\003\000\002\023\003" +
    "\000\002\023\004\000\002\025\006\000\002\026\003\000" +
    "\002\026\005\000\002\027\003\000\002\027\003\000\002" +
    "\030\005\000\002\030\011\000\002\030\015\000\002\030" +
    "\011\000\002\030\005\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\032\003\000\002\034\003\000\002\034\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\007" +
    "\000\002\033\007\000\002\033\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\006\004\012\040\005\001\002\000\010\002" +
    "\001\004\012\040\005\001\002\000\004\023\032\001\002" +
    "\000\010\002\ufffc\004\ufffc\040\ufffc\001\002\000\004\002" +
    "\031\001\002\000\010\002\uffff\004\uffff\040\uffff\001\002" +
    "\000\010\002\ufffd\004\ufffd\040\ufffd\001\002\000\004\040" +
    "\013\001\002\000\004\025\014\001\002\000\010\011\021" +
    "\026\ufffa\040\015\001\002\000\004\021\027\001\002\000" +
    "\010\011\021\026\ufff9\040\015\001\002\000\004\026\025" +
    "\001\002\000\010\011\ufff8\026\ufff8\040\ufff8\001\002\000" +
    "\004\040\022\001\002\000\004\021\023\001\002\000\004" +
    "\040\024\001\002\000\010\011\ufff5\026\ufff5\040\ufff5\001" +
    "\002\000\010\002\ufffb\004\ufffb\040\ufffb\001\002\000\010" +
    "\011\ufff7\026\ufff7\040\ufff7\001\002\000\004\040\030\001" +
    "\002\000\010\011\ufff6\026\ufff6\040\ufff6\001\002\000\004" +
    "\002\000\001\002\000\010\010\036\024\ufff3\040\033\001" +
    "\002\000\004\021\166\001\002\000\006\015\164\024\ufff2" +
    "\001\002\000\006\015\uffef\024\uffef\001\002\000\004\040" +
    "\033\001\002\000\004\024\040\001\002\000\004\022\041" +
    "\001\002\000\004\023\042\001\002\000\006\024\ufff1\040" +
    "\033\001\002\000\006\015\uffec\024\uffec\001\002\000\006" +
    "\015\161\024\ufff0\001\002\000\004\024\046\001\002\000" +
    "\004\025\047\001\002\000\010\005\050\007\uffe9\026\uffe9" +
    "\001\002\000\004\040\033\001\002\000\010\007\uffe7\015" +
    "\uffe7\026\uffe7\001\002\000\006\007\061\026\uffe4\001\002" +
    "\000\010\007\uffe8\015\054\026\uffe8\001\002\000\004\005" +
    "\050\001\002\000\010\007\uffe6\015\uffe6\026\uffe6\001\002" +
    "\000\006\007\uffe2\026\uffe2\001\002\000\006\007\061\026" +
    "\uffe3\001\002\000\004\026\156\001\002\000\004\025\062" +
    "\001\002\000\014\006\070\012\071\013\063\037\066\040" +
    "\072\001\002\000\004\023\150\001\002\000\006\022\uffdf" +
    "\026\uffdf\001\002\000\010\016\142\022\uffdc\026\uffdc\001" +
    "\002\000\026\016\uffd5\017\uffd5\020\uffd5\022\uffd5\024\uffd5" +
    "\026\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\001\002\000" +
    "\010\022\uffcd\026\uffcd\031\uffcd\001\002\000\026\016\uffd4" +
    "\017\uffd4\020\uffd4\022\uffd4\024\uffd4\026\uffd4\033\uffd4\034" +
    "\uffd4\035\uffd4\036\uffd4\001\002\000\004\023\134\001\002" +
    "\000\020\017\123\020\uffd6\027\122\033\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\001\002\000\010\022\uffce\026\uffce\031\117" +
    "\001\002\000\016\017\106\020\107\033\102\034\103\035" +
    "\105\036\104\001\002\000\006\022\uffdd\026\uffdd\001\002" +
    "\000\006\022\100\026\077\001\002\000\006\007\uffe0\026" +
    "\uffe0\001\002\000\014\006\070\012\071\013\063\037\066" +
    "\040\072\001\002\000\006\022\uffde\026\uffde\001\002\000" +
    "\010\006\070\037\066\040\110\001\002\000\010\006\070" +
    "\037\066\040\110\001\002\000\010\006\070\037\066\040" +
    "\110\001\002\000\010\006\070\037\066\040\110\001\002" +
    "\000\004\040\112\001\002\000\010\006\070\037\066\040" +
    "\110\001\002\000\026\016\uffd6\017\uffd6\020\uffd6\022\uffd6" +
    "\024\uffd6\026\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\001" +
    "\002\000\022\016\uffdb\017\106\022\uffdb\026\uffdb\033\102" +
    "\034\103\035\105\036\104\001\002\000\026\016\uffcf\017" +
    "\uffcf\020\uffcf\022\uffcf\024\uffcf\026\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\001\002\000\026\016\uffd1\017\106\020" +
    "\uffd1\022\uffd1\024\uffd1\026\uffd1\033\uffd1\034\uffd1\035\uffd1" +
    "\036\104\001\002\000\026\016\uffd0\017\106\020\uffd0\022" +
    "\uffd0\024\uffd0\026\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0" +
    "\001\002\000\026\016\uffd2\017\106\020\uffd2\022\uffd2\024" +
    "\uffd2\026\uffd2\033\102\034\uffd2\035\105\036\104\001\002" +
    "\000\026\016\uffd3\017\106\020\uffd3\022\uffd3\024\uffd3\026" +
    "\uffd3\033\uffd3\034\uffd3\035\105\036\104\001\002\000\004" +
    "\040\121\001\002\000\010\022\uffcc\026\uffcc\031\uffcc\001" +
    "\002\000\006\017\123\027\122\001\002\000\010\006\133" +
    "\037\132\040\131\001\002\000\004\040\124\001\002\000" +
    "\004\027\125\001\002\000\010\006\130\037\127\040\126" +
    "\001\002\000\010\022\uffc8\026\uffc8\031\uffc8\001\002\000" +
    "\010\022\uffc6\026\uffc6\031\uffc6\001\002\000\010\022\uffc7" +
    "\026\uffc7\031\uffc7\001\002\000\010\022\uffcb\026\uffcb\031" +
    "\uffcb\001\002\000\010\022\uffc9\026\uffc9\031\uffc9\001\002" +
    "\000\010\022\uffca\026\uffca\031\uffca\001\002\000\010\006" +
    "\070\037\066\040\110\001\002\000\016\017\106\024\136" +
    "\033\102\034\103\035\105\036\104\001\002\000\004\025" +
    "\137\001\002\000\014\006\070\012\071\013\063\037\066" +
    "\040\110\001\002\000\006\016\142\026\141\001\002\000" +
    "\012\014\144\016\uffda\022\uffda\026\uffda\001\002\000\014" +
    "\006\070\012\071\013\063\037\066\040\110\001\002\000" +
    "\010\016\uffd7\022\uffd7\026\uffd7\001\002\000\004\025\145" +
    "\001\002\000\014\006\070\012\071\013\063\037\066\040" +
    "\110\001\002\000\006\016\142\026\147\001\002\000\010" +
    "\016\uffd9\022\uffd9\026\uffd9\001\002\000\010\006\070\037" +
    "\066\040\110\001\002\000\016\017\106\024\152\033\102" +
    "\034\103\035\105\036\104\001\002\000\004\025\153\001" +
    "\002\000\014\006\070\012\071\013\063\037\066\040\110" +
    "\001\002\000\006\016\142\026\155\001\002\000\010\016" +
    "\uffd8\022\uffd8\026\uffd8\001\002\000\010\002\ufff4\004\ufff4" +
    "\040\ufff4\001\002\000\006\007\uffe1\026\uffe1\001\002\000" +
    "\010\007\uffe5\015\uffe5\026\uffe5\001\002\000\004\040\033" +
    "\001\002\000\006\015\uffeb\024\uffeb\001\002\000\006\015" +
    "\uffee\024\uffee\001\002\000\004\040\033\001\002\000\006" +
    "\015\uffed\024\uffed\001\002\000\004\040\167\001\002\000" +
    "\012\007\uffea\015\uffea\024\uffea\026\uffea\001\002\000\010" +
    "\002\ufffe\004\ufffe\040\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\014\003\006\004\003\005\007\006\010\012" +
    "\005\001\001\000\010\005\167\006\010\012\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\015\010\016\011\017\001\001\000" +
    "\002\001\001\000\004\011\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\033\015\036\022\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\043\016\044\022\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\052\020\051\021\050\001\001\000" +
    "\004\022\157\001\001\000\002\001\001\000\010\023\056" +
    "\024\057\025\055\001\001\000\002\001\001\000\004\021" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\026\075\027\063\030\064\031\073\032\074\033\066" +
    "\034\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\027\100\030\064\031\073\032" +
    "\074\033\066\034\072\001\001\000\002\001\001\000\004" +
    "\031\115\001\001\000\004\031\114\001\001\000\004\031" +
    "\113\001\001\000\004\031\112\001\001\000\002\001\001" +
    "\000\004\031\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\137\031\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\030\142\031\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\030\145\031\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\030\153\031" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$HeapParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$HeapParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$HeapParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   private HeapLexer lexer;
    
   /**
    * Parses the file with the given name and returns the corresponding abstract syntax tree.
    */
   public ASTProblem parseFile(String file) throws SyntaxError, FileNotFoundException, Exception {
	lexer = new HeapLexer(new FileReader(file));
	HeapParser parser = new HeapParser(lexer);
	Symbol root = parser.parse();
	return (ASTProblem) root.value;
  }
  	
  @Override	
  public void report_fatal_error(String message, Object info) throws SyntaxError {
    Token token = (Token) info;
    throw new SyntaxError("Syntax error at " + token.line + ":" + token.column + " on " + token.text);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unused", "unchecked"}) class CUP$HeapParser$actions {
  private final HeapParser parser;

  /** Constructor */
  CUP$HeapParser$actions(HeapParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$HeapParser$do_action(
    int                        CUP$HeapParser$act_num,
    java_cup.runtime.lr_parser CUP$HeapParser$parser,
    java.util.Stack            CUP$HeapParser$stack,
    int                        CUP$HeapParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$HeapParser$result;

      /* select the action based on the action number */
      switch (CUP$HeapParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // storeVal ::= ID DOT ID EQ INT_VAL 
            {
              AST RESULT = null;
		int srcleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).right;
		String src = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ASTIntFieldVal(field, src, val); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(25/*storeVal*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // storeVal ::= ID DOT ID EQ NULL 
            {
              AST RESULT = null;
		int srcleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).right;
		String src = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		 RESULT = new ASTRefFieldVal(field, src, AST.NULL_VAL_NAME); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(25/*storeVal*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // storeVal ::= ID DOT ID EQ ID 
            {
              AST RESULT = null;
		int srcleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).right;
		String src = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		String dst = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ASTRefFieldVal(field, src, dst); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(25/*storeVal*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // storeVal ::= ID EQ INT_VAL 
            {
              AST RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ASTIntVarVal(var, val); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(25/*storeVal*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // storeVal ::= ID EQ NULL 
            {
              AST RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		 RESULT = new ASTRefVarVal(var, AST.NULL_VAL_NAME); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(25/*storeVal*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // storeVal ::= ID EQ ID 
            {
              AST RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ASTRefVarVal(var, val); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(25/*storeVal*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // heapElems ::= heapElems AND storeVal 
            {
              List RESULT = null;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		List prefix = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		AST v = (AST)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 prefix.add(v);
	   RESULT = prefix;
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(26/*heapElems*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // heapElems ::= storeVal 
            {
              List RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		AST v = (AST)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ArrayList<ASTVal>();
	   RESULT.add(v);
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(26/*heapElems*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // store ::= heapElems 
            {
              ASTStore RESULT = null;
		int elemsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int elemsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		List elems = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ASTStore(elems); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(24/*store*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr DOT ID 
            {
              ASTExpr RESULT = null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		ASTExpr lhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ASTDerefExpr(lhs, field); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(23/*expr*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr DIVIDE expr 
            {
              ASTExpr RESULT = null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		ASTExpr lhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTExpr rhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ASTIntBinOpExpr(IntBinOp.DIVIDE, lhs, rhs); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(23/*expr*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr TIMES expr 
            {
              ASTExpr RESULT = null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		ASTExpr lhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTExpr rhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ASTIntBinOpExpr(IntBinOp.TIMES, lhs, rhs); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(23/*expr*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr MINUS expr 
            {
              ASTExpr RESULT = null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		ASTExpr lhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTExpr rhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ASTIntBinOpExpr(IntBinOp.MINUS, lhs, rhs); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(23/*expr*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= expr PLUS expr 
            {
              ASTExpr RESULT = null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		ASTExpr lhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTExpr rhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ASTIntBinOpExpr(IntBinOp.PLUS, lhs, rhs); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(23/*expr*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= NULL 
            {
              ASTExpr RESULT = null;
		 RESULT = ASTNullExpr.v; 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(23/*expr*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= INT_VAL 
            {
              ASTExpr RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ASTIntValExpr(val); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(23/*expr*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= ID 
            {
              ASTExpr RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ASTVarExpr(varName); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(23/*expr*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmt ::= stmt SEMI stmt 
            {
              ASTStmt RESULT = null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		ASTStmt first = (ASTStmt)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTStmt second = (ASTStmt)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ASTSeq(first, second); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(22/*stmt*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmt ::= WHILE LP expr RP LCB stmt RCB 
            {
              ASTStmt RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).right;
		ASTExpr cond = (ASTExpr)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).right;
		ASTStmt body = (ASTStmt)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).value;
		 RESULT = new ASTWhile(cond, body); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(22/*stmt*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt ::= IF LP expr RP LCB stmt RCB ELSE LCB stmt RCB 
            {
              ASTStmt RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-8)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-8)).right;
		ASTExpr cond = (ASTExpr)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-8)).value;
		int thenStmtleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-5)).left;
		int thenStmtright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-5)).right;
		ASTStmt thenStmt = (ASTStmt)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-5)).value;
		int elseStmtleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left;
		int elseStmtright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).right;
		ASTStmt elseStmt = (ASTStmt)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).value;
		 RESULT = new ASTIf(cond, thenStmt, elseStmt); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(22/*stmt*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-10)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= IF LP expr RP LCB stmt RCB 
            {
              ASTStmt RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).right;
		ASTExpr cond = (ASTExpr)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).value;
		int thenStmtleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left;
		int thenStmtright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).right;
		ASTStmt thenStmt = (ASTStmt)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).value;
		 RESULT = new ASTIf(cond, thenStmt); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(22/*stmt*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= expr ASSIGN expr 
            {
              ASTStmt RESULT = null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		ASTExpr lhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTExpr rhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ASTAssign(lhs, rhs); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(22/*stmt*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // step ::= stmt 
            {
              ASTStep RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTStmt s = (ASTStmt)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = s; 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(21/*step*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // step ::= store 
            {
              ASTStep RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTStore s = (ASTStore)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = s;	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(21/*step*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exampleSteps ::= exampleSteps ARROW step 
            {
              List RESULT = null;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		List prefix = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTStep next = (ASTStep)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 prefix.add(next);
	   RESULT = prefix;
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(20/*exampleSteps*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exampleSteps ::= step 
            {
              List RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTStep s = (ASTStep)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ArrayList<ASTStep>();
	   RESULT.add(s);
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(20/*exampleSteps*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // example ::= EXAMPLE LCB exampleSteps RCB 
            {
              ASTExample RESULT = null;
		int stepsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left;
		int stepsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).right;
		List steps = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).value;
		 RESULT = new ASTExample(steps); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(19/*example*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // examples ::= examples example 
            {
              List RESULT = null;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).right;
		List prefix = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTExample e = (ASTExample)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 prefix.add(e);
	   RESULT = prefix;
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(17/*examples*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // examples ::= example 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTExample e = (ASTExample)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ArrayList<ASTExample>();
	   RESULT.add(e);
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(17/*examples*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // optionalExamples ::= examples 
            {
              List RESULT = null;
		int examplesleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int examplesright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		List examples = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = examples; 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(18/*optionalExamples*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // optionalExamples ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList<ASTExample>(); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(18/*optionalExamples*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // temp ::= VAR var 
            {
              ASTVarDecl RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTVarDecl v = (ASTVarDecl)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = v;
	   v.readonly = false;
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(15/*temp*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // temps ::= temps COMMA temp 
            {
              List RESULT = null;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		List prefix = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTVarDecl t = (ASTVarDecl)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 prefix.add(t);
	   RESULT = prefix;
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(13/*temps*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // temps ::= temp 
            {
              List RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTVarDecl t = (ASTVarDecl)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ArrayList<ASTVarDecl>();
	   RESULT.add(t);
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(13/*temps*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // optionalTemps ::= temps 
            {
              List RESULT = null;
		int tempsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int tempsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		List temps = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = temps; 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(14/*optionalTemps*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // optionalTemps ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList<ASTVarDecl>(); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(14/*optionalTemps*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // var ::= ID COLON ID 
            {
              ASTVarDecl RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ASTVarDecl(name, type);
	   RESULT.readonly = true;
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(16/*var*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // outputArgs ::= outputArgs COMMA var 
            {
              List RESULT = null;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		List prefix = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTVarDecl a = (ASTVarDecl)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 prefix.add(a);
	   RESULT = prefix;
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(10/*outputArgs*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // outputArgs ::= var 
            {
              List RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTVarDecl a = (ASTVarDecl)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 a.readonly = false;
	   RESULT = new ArrayList<ASTVarDecl>();
	   RESULT.add(a);
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(10/*outputArgs*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // inputArgs ::= inputArgs COMMA var 
            {
              List RESULT = null;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		List prefix = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTVarDecl a = (ASTVarDecl)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 prefix.add(a);
	   RESULT = prefix;
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(9/*inputArgs*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // inputArgs ::= MUT var 
            {
              List RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTVarDecl a = (ASTVarDecl)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 a.readonly = false;
	   RESULT = new ArrayList<ASTVarDecl>();
	   RESULT.add(a);
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(9/*inputArgs*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // inputArgs ::= var 
            {
              List RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTVarDecl a = (ASTVarDecl)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 a.readonly = true;
	   RESULT = new ArrayList<ASTVarDecl>();
	   RESULT.add(a);
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(9/*inputArgs*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // optionalOutputArgs ::= outputArgs 
            {
              List RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = args; 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(12/*optionalOutputArgs*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // optionalOutputArgs ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList<ASTVarDecl>(); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(12/*optionalOutputArgs*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // optionalInputArgs ::= inputArgs 
            {
              List RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = args; 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(11/*optionalInputArgs*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // optionalInputArgs ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList<ASTVarDecl>(); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(11/*optionalInputArgs*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // funDef ::= ID LP optionalInputArgs RP ARROW LP optionalOutputArgs RP LCB optionalTemps optionalExamples RCB 
            {
              ASTFun RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-11)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-11)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-11)).value;
		int inargsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-9)).left;
		int inargsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-9)).right;
		List inargs = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-9)).value;
		int outargsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-5)).left;
		int outargsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-5)).right;
		List outargs = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-5)).value;
		int tempsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int tempsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		List temps = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int examplesleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left;
		int examplesright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).right;
		List examples = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).value;
		 RESULT = new ASTFun(name, inargs, outargs, temps, examples); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(8/*funDef*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-11)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // field ::= GHOST ID COLON ID 
            {
              ASTDeclField RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ASTDeclField(name, type, true); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(7/*field*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // field ::= ID COLON ID 
            {
              ASTDeclField RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ASTDeclField(name, type, false); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(7/*field*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fields ::= fields field 
            {
              List RESULT = null;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).right;
		List prefix = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTDeclField f = (ASTDeclField)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 prefix.add(f);
	   RESULT = prefix;
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(5/*fields*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fields ::= field 
            {
              List RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTDeclField f = (ASTDeclField)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ArrayList<ASTDeclField>();
	   RESULT.add(f);
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(5/*fields*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // optionalFields ::= fields 
            {
              List RESULT = null;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		List fields = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = fields; 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(6/*optionalFields*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // optionalFields ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList<ASTDeclField>(); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(6/*optionalFields*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // typeDef ::= TYPE ID LCB optionalFields RCB 
            {
              ASTRefType RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).value;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).right;
		List fields = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).value;
		 RESULT = new ASTRefType(name, fields); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(4/*typeDef*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // elem ::= funDef 
            {
              AST RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTFun e = (ASTFun)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = e; 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(3/*elem*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // elem ::= typeDef 
            {
              AST RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTRefType e = (ASTRefType)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = e; 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(3/*elem*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // elemList ::= elemList elem 
            {
              List RESULT = null;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).right;
		List prefix = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 prefix.add(e);
	   RESULT = prefix;
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(2/*elemList*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // elemList ::= elem 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ArrayList<AST>();
	   RESULT.add(e);
    
              CUP$HeapParser$result = new java_cup.runtime.Symbol(2/*elemList*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= problem EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).right;
		ASTProblem start_val = (ASTProblem)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).value;
		RESULT = start_val;
              CUP$HeapParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$HeapParser$parser.done_parsing();
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // problem ::= elemList 
            {
              ASTProblem RESULT = null;
		int elementsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int elementsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		List elements = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ASTProblem(elements); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(1/*problem*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

