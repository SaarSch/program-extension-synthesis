
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Dec 15 17:37:28 IST 2017
//----------------------------------------------------

package heap.ast;

import java.io.*;
import java.util.*;
import heap.ast.Token;
import java_cup.runtime.Symbol;

/** CUP v0.10k generated parser.
  * @version Fri Dec 15 17:37:28 IST 2017
  */
@SuppressWarnings({"rawtypes", "unused"}) public class HeapParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public HeapParser() {super();}

  /** Constructor which sets the default scanner. */
  public HeapParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\003\003\000\002\002\004\000\002\004" +
    "\003\000\002\004\004\000\002\005\003\000\002\005\003" +
    "\000\002\006\007\000\002\010\002\000\002\010\003\000" +
    "\002\007\003\000\002\007\004\000\002\011\005\000\002" +
    "\012\016\000\002\015\002\000\002\015\003\000\002\016" +
    "\002\000\002\016\003\000\002\013\003\000\002\013\004" +
    "\000\002\013\005\000\002\014\003\000\002\014\005\000" +
    "\002\022\005\000\002\020\002\000\002\020\003\000\002" +
    "\017\003\000\002\017\005\000\002\021\004\000\002\024" +
    "\002\000\002\024\003\000\002\023\003\000\002\023\004" +
    "\000\002\025\010\000\002\026\003\000\002\031\002\000" +
    "\002\031\003\000\002\030\003\000\002\030\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\007\000\002\027\007\000\002\027\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\113\000\006\004\012\024\005\001\002\000\010\002" +
    "\001\004\012\024\005\001\002\000\004\017\026\001\002" +
    "\000\010\002\ufffc\004\ufffc\024\ufffc\001\002\000\004\002" +
    "\025\001\002\000\010\002\uffff\004\uffff\024\uffff\001\002" +
    "\000\010\002\ufffd\004\ufffd\024\ufffd\001\002\000\004\024" +
    "\013\001\002\000\004\021\014\001\002\000\006\022\ufffa" +
    "\024\015\001\002\000\004\015\023\001\002\000\006\022" +
    "\ufff9\024\015\001\002\000\004\022\021\001\002\000\006" +
    "\022\ufff8\024\ufff8\001\002\000\010\002\ufffb\004\ufffb\024" +
    "\ufffb\001\002\000\006\022\ufff7\024\ufff7\001\002\000\004" +
    "\024\024\001\002\000\006\022\ufff6\024\ufff6\001\002\000" +
    "\004\002\000\001\002\000\010\010\032\020\ufff4\024\027" +
    "\001\002\000\004\015\113\001\002\000\006\011\ufff0\020" +
    "\ufff0\001\002\000\006\011\111\020\ufff3\001\002\000\004" +
    "\024\027\001\002\000\004\020\034\001\002\000\004\016" +
    "\035\001\002\000\004\017\036\001\002\000\006\020\ufff2" +
    "\024\027\001\002\000\006\011\uffed\020\uffed\001\002\000" +
    "\006\011\106\020\ufff1\001\002\000\004\020\042\001\002" +
    "\000\004\021\043\001\002\000\010\005\044\007\uffea\022" +
    "\uffea\001\002\000\004\024\027\001\002\000\010\007\uffe8" +
    "\011\uffe8\022\uffe8\001\002\000\006\007\055\022\uffe5\001" +
    "\002\000\010\007\uffe9\011\050\022\uffe9\001\002\000\004" +
    "\005\044\001\002\000\010\007\uffe7\011\uffe7\022\uffe7\001" +
    "\002\000\006\007\055\022\uffe4\001\002\000\006\007\uffe3" +
    "\022\uffe3\001\002\000\004\022\103\001\002\000\004\021" +
    "\056\001\002\000\006\016\uffdf\024\060\001\002\000\010" +
    "\014\uffdd\016\uffdd\022\uffdd\001\002\000\006\012\072\013" +
    "\071\001\002\000\004\016\066\001\002\000\006\016\uffe0" +
    "\022\uffe0\001\002\000\010\014\064\016\uffde\022\uffde\001" +
    "\002\000\004\024\060\001\002\000\010\014\uffdc\016\uffdc" +
    "\022\uffdc\001\002\000\006\022\uffdf\024\060\001\002\000" +
    "\004\022\070\001\002\000\006\007\uffe1\022\uffe1\001\002" +
    "\000\010\006\102\023\101\024\100\001\002\000\004\024" +
    "\073\001\002\000\004\013\074\001\002\000\010\006\077" +
    "\023\076\024\075\001\002\000\010\014\uffd8\016\uffd8\022" +
    "\uffd8\001\002\000\010\014\uffd6\016\uffd6\022\uffd6\001\002" +
    "\000\010\014\uffd7\016\uffd7\022\uffd7\001\002\000\010\014" +
    "\uffdb\016\uffdb\022\uffdb\001\002\000\010\014\uffd9\016\uffd9" +
    "\022\uffd9\001\002\000\010\014\uffda\016\uffda\022\uffda\001" +
    "\002\000\010\002\ufff5\004\ufff5\024\ufff5\001\002\000\006" +
    "\007\uffe2\022\uffe2\001\002\000\010\007\uffe6\011\uffe6\022" +
    "\uffe6\001\002\000\004\024\027\001\002\000\006\011\uffec" +
    "\020\uffec\001\002\000\006\011\uffef\020\uffef\001\002\000" +
    "\004\024\027\001\002\000\006\011\uffee\020\uffee\001\002" +
    "\000\004\024\114\001\002\000\012\007\uffeb\011\uffeb\020" +
    "\uffeb\022\uffeb\001\002\000\010\002\ufffe\004\ufffe\024\ufffe" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\113\000\014\003\006\004\003\005\007\006\010\012" +
    "\005\001\001\000\010\005\114\006\010\012\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\015\010\016\011\017\001\001\000" +
    "\002\001\001\000\004\011\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\030\015\032\022\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\037\016\040\022\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\046\020\045\021\044\001\001\000\004\022\104" +
    "\001\001\000\002\001\001\000\010\023\051\024\053\025" +
    "\052\001\001\000\002\001\001\000\004\021\050\001\001" +
    "\000\002\001\001\000\004\025\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\026\060" +
    "\027\056\030\062\031\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\064\001\001\000\002\001\001\000" +
    "\012\026\066\027\056\030\062\031\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$HeapParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$HeapParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$HeapParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   private HeapLexer lexer;
    
   /**
    * Parses the file with the given name and returns the corresponding abstract syntax tree.
    */
   public ASTProblem parseFile(String file) throws SyntaxError, FileNotFoundException, Exception {
	lexer = new HeapLexer(new FileReader(file));
	HeapParser parser = new HeapParser(lexer);
	Symbol root = parser.parse();
	return (ASTProblem) root.value;
  }
  	
  @Override	
  public void report_fatal_error(String message, Object info) throws SyntaxError {
    Token token = (Token) info;
    throw new SyntaxError("Syntax error at " + token.line + ":" + token.column + " on " + token.text);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unused", "unchecked"}) class CUP$HeapParser$actions {
  private final HeapParser parser;

  /** Constructor */
  CUP$HeapParser$actions(HeapParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$HeapParser$do_action(
    int                        CUP$HeapParser$act_num,
    java_cup.runtime.lr_parser CUP$HeapParser$parser,
    java.util.Stack            CUP$HeapParser$stack,
    int                        CUP$HeapParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$HeapParser$result;

      /* select the action based on the action number */
      switch (CUP$HeapParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // storeVal ::= ID DOT ID EQ INT_VAL 
            {
              AST RESULT = null;
		int srcleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).right;
		String src = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ASTIntFieldVal(field, src, val); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(21/*storeVal*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // storeVal ::= ID DOT ID EQ NULL 
            {
              AST RESULT = null;
		int srcleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).right;
		String src = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		 RESULT = new ASTRefFieldVal(field, src, AST.NULL_VAL_NAME); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(21/*storeVal*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // storeVal ::= ID DOT ID EQ ID 
            {
              AST RESULT = null;
		int srcleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).right;
		String src = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		String dst = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ASTRefFieldVal(field, src, dst); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(21/*storeVal*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // storeVal ::= ID EQ INT_VAL 
            {
              AST RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ASTIntVarVal(var, val); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(21/*storeVal*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // storeVal ::= ID EQ NULL 
            {
              AST RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		 RESULT = new ASTRefVarVal(var, AST.NULL_VAL_NAME); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(21/*storeVal*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // storeVal ::= ID EQ ID 
            {
              AST RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ASTRefVarVal(var, val); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(21/*storeVal*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // heapElems ::= heapElems AND storeVal 
            {
              List RESULT = null;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		List prefix = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		AST v = (AST)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 prefix.add(v);
	   RESULT = prefix;
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(22/*heapElems*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // heapElems ::= storeVal 
            {
              List RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		AST v = (AST)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ArrayList<ASTVal>();
	   RESULT.add(v);
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(22/*heapElems*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // optionalHeapElems ::= heapElems 
            {
              List RESULT = null;
		int heapElemsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int heapElemsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		List heapElems = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = heapElems; 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(23/*optionalHeapElems*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // optionalHeapElems ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList<ASTVal>(); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(23/*optionalHeapElems*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // store ::= optionalHeapElems 
            {
              ASTStore RESULT = null;
		int elementsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int elementsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		List elements = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ASTStore(elements); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(20/*store*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // example ::= EXAMPLE LCB store ARROW store RCB 
            {
              ASTExample RESULT = null;
		int inputleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).left;
		int inputright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).right;
		ASTStore input = (ASTStore)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).value;
		int goalleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left;
		int goalright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).right;
		ASTStore goal = (ASTStore)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).value;
		 RESULT = new ASTExample(input, goal); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(19/*example*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // examples ::= examples example 
            {
              List RESULT = null;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).right;
		List prefix = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTExample e = (ASTExample)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 prefix.add(e);
	   RESULT = prefix;
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(17/*examples*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // examples ::= example 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTExample e = (ASTExample)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ArrayList<ASTExample>();
	   RESULT.add(e);
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(17/*examples*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // optionalExamples ::= examples 
            {
              List RESULT = null;
		int examplesleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int examplesright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		List examples = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = examples; 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(18/*optionalExamples*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // optionalExamples ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList<ASTExample>(); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(18/*optionalExamples*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // temp ::= VAR var 
            {
              ASTVar RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTVar v = (ASTVar)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = v;
	   v.readonly = false;
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(15/*temp*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // temps ::= temps COMMA temp 
            {
              List RESULT = null;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		List prefix = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTVar t = (ASTVar)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 prefix.add(t);
	   RESULT = prefix;
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(13/*temps*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // temps ::= temp 
            {
              List RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTVar t = (ASTVar)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ArrayList<ASTVar>();
	   RESULT.add(t);
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(13/*temps*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // optionalTemps ::= temps 
            {
              List RESULT = null;
		int tempsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int tempsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		List temps = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = temps; 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(14/*optionalTemps*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // optionalTemps ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList<ASTVar>(); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(14/*optionalTemps*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var ::= ID COLON ID 
            {
              ASTVar RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ASTVar(name, type);
	   RESULT.readonly = true;
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(16/*var*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // outputArgs ::= outputArgs COMMA var 
            {
              List RESULT = null;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		List prefix = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTVar a = (ASTVar)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 prefix.add(a);
	   RESULT = prefix;
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(10/*outputArgs*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // outputArgs ::= var 
            {
              List RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTVar a = (ASTVar)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 a.readonly = false;
	   RESULT = new ArrayList<ASTVar>();
	   RESULT.add(a);
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(10/*outputArgs*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // inputArgs ::= inputArgs COMMA var 
            {
              List RESULT = null;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		List prefix = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTVar a = (ASTVar)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 prefix.add(a);
	   RESULT = prefix;
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(9/*inputArgs*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // inputArgs ::= MUT var 
            {
              List RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTVar a = (ASTVar)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 a.readonly = false;
	   RESULT = new ArrayList<ASTVar>();
	   RESULT.add(a);
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(9/*inputArgs*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // inputArgs ::= var 
            {
              List RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTVar a = (ASTVar)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 a.readonly = true;
	   RESULT = new ArrayList<ASTVar>();
	   RESULT.add(a);
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(9/*inputArgs*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // optionalOutputArgs ::= outputArgs 
            {
              List RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = args; 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(12/*optionalOutputArgs*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // optionalOutputArgs ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList<ASTVar>(); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(12/*optionalOutputArgs*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // optionalInputArgs ::= inputArgs 
            {
              List RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = args; 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(11/*optionalInputArgs*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // optionalInputArgs ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList<ASTVar>(); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(11/*optionalInputArgs*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // funDef ::= ID LP optionalInputArgs RP ARROW LP optionalOutputArgs RP LCB optionalTemps optionalExamples RCB 
            {
              ASTFun RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-11)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-11)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-11)).value;
		int inargsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-9)).left;
		int inargsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-9)).right;
		List inargs = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-9)).value;
		int outargsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-5)).left;
		int outargsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-5)).right;
		List outargs = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-5)).value;
		int tempsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int tempsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		List temps = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int examplesleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left;
		int examplesright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).right;
		List examples = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).value;
		 RESULT = new ASTFun(name, inargs, outargs, temps, examples); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(8/*funDef*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-11)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // field ::= ID COLON ID 
            {
              ASTField RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ASTField(name, type); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(7/*field*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fields ::= fields field 
            {
              List RESULT = null;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).right;
		List prefix = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTField f = (ASTField)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 prefix.add(f);
	   RESULT = prefix;
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(5/*fields*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fields ::= field 
            {
              List RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTField f = (ASTField)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ArrayList<ASTField>();
	   RESULT.add(f);
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(5/*fields*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // optionalFields ::= fields 
            {
              List RESULT = null;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		List fields = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = fields; 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(6/*optionalFields*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // optionalFields ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList<ASTField>(); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(6/*optionalFields*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // typeDef ::= TYPE ID LCB optionalFields RCB 
            {
              ASTRefType RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).value;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).right;
		List fields = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).value;
		 RESULT = new ASTRefType(name, fields); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(4/*typeDef*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // elem ::= funDef 
            {
              AST RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTFun e = (ASTFun)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = e; 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(3/*elem*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // elem ::= typeDef 
            {
              AST RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTRefType e = (ASTRefType)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = e; 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(3/*elem*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // elemList ::= elemList elem 
            {
              List RESULT = null;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).right;
		List prefix = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 prefix.add(e);
	   RESULT = prefix;
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(2/*elemList*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // elemList ::= elem 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ArrayList<AST>();
	   RESULT.add(e);
    
              CUP$HeapParser$result = new java_cup.runtime.Symbol(2/*elemList*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= problem EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).right;
		ASTProblem start_val = (ASTProblem)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).value;
		RESULT = start_val;
              CUP$HeapParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$HeapParser$parser.done_parsing();
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // problem ::= elemList 
            {
              ASTProblem RESULT = null;
		int elementsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int elementsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		List elements = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ASTProblem(elements); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(1/*problem*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

