
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Dec 12 20:03:39 IST 2017
//----------------------------------------------------

package heap.ast;

import java.io.*;
import java.util.*;
import heap.ast.Token;
import java_cup.runtime.Symbol;

/** CUP v0.10k generated parser.
  * @version Tue Dec 12 20:03:39 IST 2017
  */
@SuppressWarnings({"rawtypes", "unused"}) public class HeapParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public HeapParser() {super();}

  /** Constructor which sets the default scanner. */
  public HeapParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\003\003\000\002\002\004\000\002\004" +
    "\003\000\002\004\004\000\002\005\003\000\002\005\003" +
    "\000\002\006\007\000\002\007\003\000\002\007\004\000" +
    "\002\010\005\000\002\011\016\000\002\012\003\000\002" +
    "\012\005\000\002\015\005\000\002\013\003\000\002\013" +
    "\005\000\002\014\004\000\002\016\003\000\002\016\004" +
    "\000\002\017\010\000\002\020\003\000\002\022\003\000" +
    "\002\022\004\000\002\021\006\000\002\021\006\000\002" +
    "\021\010\000\002\021\010\000\002\021\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\101\000\006\004\012\020\005\001\002\000\010\002" +
    "\001\004\012\020\005\001\002\000\004\013\025\001\002" +
    "\000\010\002\ufffc\004\ufffc\020\ufffc\001\002\000\004\002" +
    "\024\001\002\000\010\002\uffff\004\uffff\020\uffff\001\002" +
    "\000\010\002\ufffd\004\ufffd\020\ufffd\001\002\000\004\020" +
    "\013\001\002\000\004\015\014\001\002\000\004\020\015" +
    "\001\002\000\004\011\022\001\002\000\006\016\020\020" +
    "\015\001\002\000\006\016\ufffa\020\ufffa\001\002\000\010" +
    "\002\ufffb\004\ufffb\020\ufffb\001\002\000\006\016\ufff9\020" +
    "\ufff9\001\002\000\004\020\023\001\002\000\006\016\ufff8" +
    "\020\ufff8\001\002\000\004\002\000\001\002\000\004\020" +
    "\026\001\002\000\004\011\101\001\002\000\006\010\ufff6" +
    "\014\ufff6\001\002\000\006\010\031\014\032\001\002\000" +
    "\004\020\026\001\002\000\004\012\033\001\002\000\004" +
    "\013\034\001\002\000\004\020\026\001\002\000\006\010" +
    "\031\014\036\001\002\000\004\015\037\001\002\000\004" +
    "\005\040\001\002\000\004\020\026\001\002\000\006\007" +
    "\ufff3\010\ufff3\001\002\000\006\007\046\010\043\001\002" +
    "\000\004\005\040\001\002\000\006\007\ufff0\016\ufff0\001" +
    "\002\000\006\007\046\016\075\001\002\000\004\015\047" +
    "\001\002\000\004\020\051\001\002\000\010\012\uffec\016" +
    "\uffec\020\uffec\001\002\000\004\013\060\001\002\000\004" +
    "\012\055\001\002\000\010\012\uffed\016\uffed\020\051\001" +
    "\002\000\010\012\uffeb\016\uffeb\020\uffeb\001\002\000\004" +
    "\020\051\001\002\000\004\016\057\001\002\000\006\007" +
    "\uffee\016\uffee\001\002\000\006\017\062\020\061\001\002" +
    "\000\006\010\064\014\065\001\002\000\004\014\063\001" +
    "\002\000\010\012\uffe9\016\uffe9\020\uffe9\001\002\000\010" +
    "\006\070\017\067\020\066\001\002\000\010\012\uffea\016" +
    "\uffea\020\uffea\001\002\000\004\014\073\001\002\000\004" +
    "\014\072\001\002\000\004\014\071\001\002\000\010\012" +
    "\uffe7\016\uffe7\020\uffe7\001\002\000\010\012\uffe6\016\uffe6" +
    "\020\uffe6\001\002\000\010\012\uffe8\016\uffe8\020\uffe8\001" +
    "\002\000\006\007\uffef\016\uffef\001\002\000\010\002\ufff7" +
    "\004\ufff7\020\ufff7\001\002\000\006\007\ufff2\010\ufff2\001" +
    "\002\000\006\007\ufff1\010\ufff1\001\002\000\006\010\ufff5" +
    "\014\ufff5\001\002\000\004\020\102\001\002\000\010\007" +
    "\ufff4\010\ufff4\014\ufff4\001\002\000\010\002\ufffe\004\ufffe" +
    "\020\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\101\000\014\003\006\004\003\005\007\006\010\011" +
    "\005\001\001\000\010\005\102\006\010\011\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\015\010\016\001\001\000\002\001" +
    "\001\000\004\010\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\027\015\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\034\015\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\041\014\040\001\001\000\004" +
    "\015\076\001\001\000\002\001\001\000\006\016\044\017" +
    "\043\001\001\000\004\014\075\001\001\000\002\001\001" +
    "\000\004\017\073\001\001\000\002\001\001\000\010\020" +
    "\051\021\047\022\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\053\001\001\000" +
    "\002\001\001\000\010\020\055\021\047\022\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$HeapParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$HeapParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$HeapParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   private HeapLexer lexer;
    
   /**
    * Parses the file with the given name and returns the corresponding abstract syntax tree.
    */
   public ASTProblem parseFile(String file) throws SyntaxError, FileNotFoundException, Exception {
	lexer = new HeapLexer(new FileReader(file));
	HeapParser parser = new HeapParser(lexer);
	Symbol root = parser.parse();
	return (ASTProblem) root.value;
  }
  	
  @Override	
  public void report_fatal_error(String message, Object info) throws SyntaxError {
    Token token = (Token) info;
    throw new SyntaxError("Syntax error at " + token.line + ":" + token.column + " on " + token.text);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unused", "unchecked"}) class CUP$HeapParser$actions {
  private final HeapParser parser;

  /** Constructor */
  CUP$HeapParser$actions(HeapParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$HeapParser$do_action(
    int                        CUP$HeapParser$act_num,
    java_cup.runtime.lr_parser CUP$HeapParser$parser,
    java.util.Stack            CUP$HeapParser$stack,
    int                        CUP$HeapParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$HeapParser$result;

      /* select the action based on the action number */
      switch (CUP$HeapParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // storeVal ::= ID LP ID COMMA INT_VAL RP 
            {
              AST RESULT = null;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-5)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-5)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-5)).value;
		int srcleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).right;
		String src = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).value;
		 RESULT = new ASTIntFieldVal(field, src, Integer.parseInt(val)); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(15/*storeVal*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // storeVal ::= ID LP ID COMMA NULL RP 
            {
              AST RESULT = null;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-5)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-5)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-5)).value;
		int srcleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).right;
		String src = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).value;
		 RESULT = new ASTRefFieldVal(field, src, AST.NULL_VAL_NAME); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(15/*storeVal*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // storeVal ::= ID LP ID COMMA ID RP 
            {
              AST RESULT = null;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-5)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-5)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-5)).value;
		int srcleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).right;
		String src = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).right;
		String dst = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).value;
		 RESULT = new ASTRefFieldVal(field, src, dst); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(15/*storeVal*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // storeVal ::= ID LP INT_VAL RP 
            {
              AST RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).value;
		 RESULT = new ASTIntVarVal(var, Integer.parseInt(val)); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(15/*storeVal*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // storeVal ::= ID LP ID RP 
            {
              AST RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).value;
		 RESULT = new ASTRefVarVal(var, val); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(15/*storeVal*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // heapElems ::= heapElems storeVal 
            {
              List RESULT = null;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).right;
		List prefix = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		AST v = (AST)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 prefix.add(v);
	   RESULT = prefix;
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(16/*heapElems*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // heapElems ::= storeVal 
            {
              List RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		AST v = (AST)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ArrayList<ASTFieldVal>();
	   RESULT.add(v);
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(16/*heapElems*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // store ::= heapElems 
            {
              ASTStore RESULT = null;
		int elementsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int elementsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		List elements = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ASTStore(elements); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(14/*store*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // example ::= EXAMPLE LCB store ARROW store RCB 
            {
              ASTExample RESULT = null;
		int inputleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).left;
		int inputright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).right;
		ASTStore input = (ASTStore)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).value;
		int goalleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left;
		int goalright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).right;
		ASTStore goal = (ASTStore)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).value;
		 RESULT = new ASTExample(input, goal); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(13/*example*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // examples ::= examples example 
            {
              List RESULT = null;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).right;
		List prefix = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTExample e = (ASTExample)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 prefix.add(e);
	   RESULT = prefix;
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(12/*examples*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // examples ::= example 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTExample e = (ASTExample)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ArrayList<ASTExample>();
	   RESULT.add(e);
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(12/*examples*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // temp ::= VAR var 
            {
              ASTVar RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTVar v = (ASTVar)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = v; 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(10/*temp*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // temps ::= temps COMMA temp 
            {
              List RESULT = null;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		List prefix = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTVar t = (ASTVar)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 prefix.add(t);
	   RESULT = prefix;
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(9/*temps*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // temps ::= temp 
            {
              List RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTVar t = (ASTVar)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ArrayList<ASTVar>();
	   RESULT.add(t);
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(9/*temps*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // var ::= ID COLON ID 
            {
              ASTVar RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ASTVar(name, type); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(11/*var*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // args ::= args COMMA var 
            {
              List RESULT = null;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		List prefix = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTVar a = (ASTVar)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 prefix.add(a);
	   RESULT = prefix;
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(8/*args*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // args ::= var 
            {
              List RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTVar a = (ASTVar)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ArrayList<ASTVar>();
	   RESULT.add(a);
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(8/*args*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funDef ::= ID LP args RP ARROW LP args RP LCB temps examples RCB 
            {
              ASTFun RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-11)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-11)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-11)).value;
		int inargsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-9)).left;
		int inargsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-9)).right;
		List inargs = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-9)).value;
		int outargsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-5)).left;
		int outargsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-5)).right;
		List outargs = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-5)).value;
		int tempsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int tempsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		List temps = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int examplesleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left;
		int examplesright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).right;
		List examples = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).value;
		 RESULT = new ASTFun(name, inargs, outargs, temps, examples); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(7/*funDef*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-11)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // field ::= ID COLON ID 
            {
              ASTField RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ASTField(name, type); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(6/*field*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fields ::= fields field 
            {
              List RESULT = null;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).right;
		List prefix = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTField f = (ASTField)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 prefix.add(f);
	   RESULT = prefix;
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(5/*fields*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fields ::= field 
            {
              List RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTField f = (ASTField)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ArrayList<ASTField>();
	   RESULT.add(f);
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(5/*fields*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // typeDef ::= TYPE ID LCB fields RCB 
            {
              ASTRefType RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-3)).value;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).right;
		List fields = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).value;
		 RESULT = new ASTRefType(name, fields); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(4/*typeDef*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // elem ::= funDef 
            {
              AST RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTFun e = (ASTFun)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = e; 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(3/*elem*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // elem ::= typeDef 
            {
              AST RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		ASTRefType e = (ASTRefType)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = e; 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(3/*elem*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // elemList ::= elemList elem 
            {
              List RESULT = null;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).right;
		List prefix = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 prefix.add(e);
	   RESULT = prefix;
	
              CUP$HeapParser$result = new java_cup.runtime.Symbol(2/*elemList*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // elemList ::= elem 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ArrayList<AST>();
	   RESULT.add(e);
    
              CUP$HeapParser$result = new java_cup.runtime.Symbol(2/*elemList*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= problem EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).right;
		ASTProblem start_val = (ASTProblem)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).value;
		RESULT = start_val;
              CUP$HeapParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$HeapParser$parser.done_parsing();
          return CUP$HeapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // problem ::= elemList 
            {
              ASTProblem RESULT = null;
		int elementsleft = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left;
		int elementsright = ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right;
		List elements = (List)((java_cup.runtime.Symbol) CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).value;
		 RESULT = new ASTProblem(elements); 
              CUP$HeapParser$result = new java_cup.runtime.Symbol(1/*problem*/, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$HeapParser$stack.elementAt(CUP$HeapParser$top-0)).right, RESULT);
            }
          return CUP$HeapParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

